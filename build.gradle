buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'
    }
    repositories {
        mavenLocal()
        //jcenter()
        maven {
            url "${artifactory_url}repo"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        maven {
            url 'http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/'
        }
        maven {
            url 'http://jaspersoft.artifactoryonline.com/jaspersoft/jr-ce-releases'
        }
        maven {
            url 'http://jasperreports.sourceforge.net/maven2'
        }
    }
    dependencies {
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.0.0')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('com.github.gmazelier:jasperreports-gradle-plugin:0.3.2'){
            exclude group: 'net.sf.jasperreports', module: 'jasperreports'
        }
        classpath("net.sf.jasperreports:jasperreports:6.2.2")
        classpath("com.itextpdf:itextpdf:5.5.9")
        classpath("net.sf.jasperreports:jasperreports-functions:6.2.2")
    }
}

allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'spring-boot'
    apply plugin: 'com.github.gmazelier.jasperreports'
    version = '1.02-SNAPSHOT'
    archivesBaseName = 'pdfreports'
    group = 'gov.dwp.carers'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

String repo = version.endsWith('SNAPSHOT') ? 'libs-snapshot-local' : 'libs-release-local'

artifactory {
    contextUrl = "${artifactory_url}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        mavenLocal()
        repository {
            repoKey = repo
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('mavenJava')
            publishArtifacts = true
            publishPom = true // Publish generated POM files to Artifactory (true by default)
        }
    }
    resolve {
        repository {
            repoKey = 'repo'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/'
    }
    maven {
        url 'http://jaspersoft.artifactoryonline.com/jaspersoft/jr-ce-releases/'
    }
    maven {
        url 'http://jasperreports.sourceforge.net/maven2'
    }
}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

//Project dependencies
dependencies {
    testCompile(
            "gov.dwp.carers:p1:4.01-SNAPSHOT",
            "gov.dwp.carers:fonts:1.0",
            "gov.dwp.carers:xmlcommons:8.22-SNAPSHOT",
            "gov.dwp.carers:carerscommon:8.05-SNAPSHOT",
            "net.sf.jasperreports:jasperreports:6.2.2",
            "com.itextpdf:itextpdf:5.5.9",
            "com.adobe.xmp:xmpcore:5.1.2",
            "xalan:xalan:2.7.2",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-jetty",
            "org.springframework.boot:spring-boot-starter-data-rest",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-websocket",
            "org.springframework.boot:spring-boot-devtools",
            "net.sf.jasperreports:jasperreports-functions:6.2.2",
            "org.springframework.boot:spring-boot-starter-actuator",
            "me.moocar:logback-gelf:0.3",
            "org.springframework.boot:spring-boot-starter-test",
            "org.assertj:assertj-core:3.2.0"
    )
}

//Use this for publishing to local Maven repo
//gradle publishToMavenLocal
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact (sourcesJar) {
                classifier = 'sources'
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task createInfoFile << {
    def props = new Properties()
    props.setProperty("application.version", version)
    props.setProperty("application.name", rootProject.name)
    def writer = new FileWriter(file('./src/main/resources/config/application-info.properties'))
    try {
        props.store(writer, "application-info.properties Created for build version:" + version)
        writer.flush()
    } finally {
        writer.close()
    }
}

compileJava.dependsOn(createInfoFile)

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

test {
    testLogging.showStandardStreams = true
}

processResources {
    exclude('**/*.jrxml')
}

jasperreports {
    srcDir = file("src/main/resources/config")
    tmpDir = file("${buildDir}/jasperreports")
    outDir = file("${buildDir}/resources/main/config")
    srcExt = '.jrxml'
    outExt = '.jasper'
    keepJava = false
    validateXml = true
    verbose = true
    useRelativeOutDir = true
    classpath = []
}

compileJava.dependsOn(compileAllReports)

